#!/bin/zsh

# usage:
#  source session [profilename]
#  source session
#
# you will be prompted for the MFA code

PROFILE="${1}"

read -s "?Enter MFA code: " TOKEN
echo

if [[ -n "$TOKEN" ]] && [[ ${#TOKEN} == 6 ]]; then

  if [[ ! -n "$PROFILE" ]]; then
    PROFILE=default
  fi

  MFA_SERIAL=$(aws sts get-caller-identity --profile $PROFILE --query Arn --output text)

  MFA_SERIAL=${MFA_SERIAL/user/mfa}

  if [[ -n "$PROFILE" ]]; then
    echo "Using profile so removing env credentials"
    temp_st=$AWS_SESSION_TOKEN
    temp_sak=$AWS_SECRET_ACCESS_KEY
    temp_aki=$AWS_ACCESS_KEY_ID
    unset AWS_SESSION_TOKEN 2> /dev/null
    unset AWS_SECURITY_TOKEN 2> /dev/null
    unset AWS_SECRET_ACCESS_KEY 2> /dev/null
    unset AWS_ACCESS_KEY_ID 2> /dev/null
  fi

  CREDENTIALS=$(aws sts get-session-token \
    --output text \
    --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
    --profile $PROFILE \
    --duration-seconds 3600 \
    --serial-number $MFA_SERIAL \
    --token-code $TOKEN)

  if [ "$?" -ne "0" ]; then

    echo "Failed to get session token. Make sure mfa token is correct and MFA device is in sync and profile exists."

    if [[ -n "$PROFILE" ]]; then
      echo "Restoring env credentials"
      export AWS_SESSION_TOKEN=$temp_st
      export AWS_SECURITY_TOKEN=$temp_st
      export AWS_SECRET_ACCESS_KEY=$temp_sak
      export AWS_ACCESS_KEY_ID=$temp_aki
    fi
    # rm ./SESSION 
    return 1
  fi
  read accessKeyId secretAccessKey sessionToken <<< $(echo $CREDENTIALS)
  export AWS_ACCESS_KEY_ID=$accessKeyId
  export AWS_SECRET_ACCESS_KEY=$secretAccessKey
  export AWS_SESSION_TOKEN=$sessionToken
  export AWS_SECURITY_TOKEN=$sessionToken
  printf " ---\nSession successfully set for profile/user: "$PROFILE/$(cut -d'/' -f2 <<< $MFA_SERIAL)"\n ---\n"
  # rm ./SESSION

else

    echo "MFA token invalid"

fi

